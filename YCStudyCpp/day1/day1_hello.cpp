//
// Created by 杨充 on 2024/6/13.
// 1.1.1 C++简单介绍
//
#include <iostream>
using namespace std;


//1.1.1.1 面向对象程序设计
void test1_1_1_1();
//1.1.1.2 标准库
void test1_1_1_2();
//1.1.1.3 C++ 的使用场景
void test1_1_1_3();
//1.1.1.4 C++ 编译器编译
void test1_1_1_4();

int main() {
    test1_1_1_1();
    test1_1_1_2();
    test1_1_1_3();
    test1_1_1_4();
    return 0;
}

//1.1.1.1 面向对象程序设计
void test1_1_1_1() {
    //C++ 简介
    //C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。
    //
    //C++ 被认为是一种中级语言，它综合了高级语言和低级语言的特点。
    //
    //C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，最初命名为带类的C，后来在 1983 年更名为 C++。
    //
    //C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。
    //
    //注意：使用静态类型的编程语言是在编译时执行类型检查，而不是在运行时执行类型检查。


    //面向对象程序设计
    //C++ 完全支持面向对象的程序设计，包括面向对象开发的四大特性：
    //封装（Encapsulation）：封装是将数据和方法组合在一起，对外部隐藏实现细节，只公开对外提供的接口。这样可以提高安全性、可靠性和灵活性。
    //继承（Inheritance）：继承是从已有类中派生出新类，新类具有已有类的属性和方法，并且可以扩展或修改这些属性和方法。这样可以提高代码的复用性和可扩展性。
    //多态（Polymorphism）：多态是指同一种操作作用于不同的对象，可以有不同的解释和实现。它可以通过接口或继承实现，可以提高代码的灵活性和可读性。
    //抽象（Abstraction）：抽象是从具体的实例中提取共同的特征，形成抽象类或接口，以便于代码的复用和扩展。抽象类和接口可以让程序员专注于高层次的设计和业务逻辑，而不必关注底层的实现细节。
    cout << "Hello World 哈哈哈 \n"; // 输出 Hello World
}

//1.1.1.2 标准库
void test1_1_1_2() {
    //标准库
    //标准的 C++ 由三个重要部分组成：
    //核心语言，提供了所有构件块，包括变量、数据类型和常量，等等。
    //C++ 标准库，提供了大量的函数，用于操作文件、字符串等。
    //标准模板库（STL），提供了大量的方法，用于操作数据结构等。
}

//1.1.1.3 C++ 的使用场景
void test1_1_1_3() {
    //C++ 的使用场景，在许多行业和领域都有广泛应用，包括：游戏，嵌入式，图形图像等
}

//1.1.1.4 C++ 编译器编译
void test1_1_1_4() {
    cout << "1.1.1.4 C++ 编译器编译。hello world" << endl;

    //最简单的编译方式：
    //$ g++ day1_hello.cpp
    //由于命令行中未指定可执行程序的文件名，编译器采用默认的 a.out。程序可以这样来运行：
    //$ ./a.out
    //1.1.1.4 C++ 编译器编译。hello world


    //通常我们使用 -o 选项指定可执行程序的文件名，以下实例生成一个 day1_hello 的可执行文件：
    //$ g++ day1_hello.cpp -o day1_hello
    //$ ./day1_hello
    //1.1.1.4 C++ 编译器编译。hello world

    //g++ 有些系统默认是使用 C++98，我们可以指定使用 C++11 来编译 main.cpp 文件：
    //g++ -g -Wall -std=c++11 main.cpp
}

